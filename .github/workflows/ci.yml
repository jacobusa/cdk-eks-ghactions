name: ci

on:
  push:
    branches:
      - main
env:
  DOCKER_USER: ${{secrets.DOCKER_USER}}
  DOCKER_TOKEN: ${{secrets.DOCKER_TOKEN}}
  REPO_NAME: ${{secrets.REPO_NAME}}
  ACCOUNT_ID: ${{secrets.ACCOUNT_ID}}
  AWS_REGION: ${{secrets.AWS_REGION}}

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [3.9]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         cache: "pip"
  #     - name: Install dependencies
  #       run: |
  #         make install
  #     - name: Lint with pylint
  #       run: |
  #         make lint
  #     - name: Test with pytest
  #       run: |
  #         make test
  build-image-push:
    name: "üõ†Ô∏è"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: | # log into docker hub account
          docker login -u $DOCKER_USER -p $DOCKER_TOKEN

      - name: Get current date # get the date of the build
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d--%M-%S')"

      - name: Build the Docker image # push The image to the docker hub
        run: docker build . --file Dockerfile --tag $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}

      - name: Docker Push
        run: docker push $DOCKER_USER/$REPO_NAME:${{ steps.date.outputs.date }}

      - name: Update k8s file
        run: |
          sed -i "s/weather-api:.*/weather-api:$DOCKER_TAG_VERSION/" manifests/api-deployment.yaml

  # cdk:
  #   name: "Ô∏èüöÄ"
  #   runs-on: ubuntu-latest
  #   needs: build-image-push
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Install and configure AWS CDK
  #       run: |
  #         npm install -g aws-cdk
  #         cdk --version

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         cache: "pip"

  #     - name: Install dependencies
  #       run: |
  #         make all
  #         cdk bootstrap aws://$ACCOUNT_ID/$AWS_REGION # Replace with your AWS account ID and desired region

  #     - name: Deploy EKS Cluster with CDK
  #       run: |
  #         cdk deploy --all --require-approval=never

  #     - name: Cleanup
  #       run: |
  #         aws configure unset aws_access_key_id
  #         aws configure unset aws_secret_access_key
  #       if: always()

  # manage-k8s:
  #   name: "Ô∏èü•É"
  #   runs-on: ubuntu-latest
  #   needs: cdk
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Update kube config
  #       run: |
  #         aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION --role-arn arn:aws:iam::$ACCOUNT_ID:role/$MASTERS_ROLE_NAME

  #     - name: Run test commands
  #       run: |
  #         kubectl get pod
  #         kubectl get svc
  #         kubectl get ns
  #         kubectl get all

  #     - name: Update secrets file
  #       run: |
  #         sed -i "s/<OWM_API_KEY>.*/${{ secrets.OWM_API_KEY }}/" manifests/api-secret.yaml

  #     - name: Deploy to EKS
  #       # ensure postgres is created before python app is
  #       run: |
  #         kubectl apply -f manifests/
  #         kubectl set image deployment/your-flask-app-deployment flask-app=your-docker-image:latest

  #     - name: Install Helm
  #       uses: azure/setup-helm@v3
  #       with:
  #         # version: '<version>' # default is latest (stable)
  #         token: ${{ secrets.GITHUB_TOKEN }} # only needed if version is 'latest'
  #       id: install

  #     - name: Install Prometheus
  #       run: |
  #         kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
  #         helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
  #         helm repo update
  #         helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
  #           --values manifests/prometheus-values.yaml \
  #           --namespace monitoring \
  #           --create-namespace \
  #           --set alertmanager.persistentVolume.storageClass="gp2",server.persistendVolume.storageClass="gp2"

  #         kubectl get all -n monitoring

  # - name: Install NGINX controller
  #   run: |
  #   # kubectl port-forward svc/prometheus-kube-prometheus-prometheus -n monitoring 4001:9090

  # - name: Install Postgres
  #   run: |
  #     helm repo add bitnami https://charts.bitnami.com/bitnami
  #     helm repo update
  #     helm upgrade --install postgres bitnami/postgresql \
  #        --values manifests/postgres-values.yaml

  # - name: Install NGINX Controller
  #   run: |
  #     helm repo add ingress-nginx \
  #       https://kubernetes.github.io/ingress-nginx

  #     helm repo update

  #     helm upgrade --install ingress-nginx ingress-nginx \
  #        --repo https://kubernetes.github.io/ingress-nginx \
  #        --namespace ingress-nginx \
  #        --create-namespace \
  #        --set controller.ingressClassResource.name="ingress-nginx"
  #        --set controller.service.annotations.service.beta.kubernetes.io/aws-load-balancer-type="external"
  #        --set controller.service.annotations.service.beta.kubernetes.io/aws-load-balancer-schema="internet-facing"

  #     kubectl port-forward svc/prometheus-kube-prometheus-prometheus -n monitoring 4001:9090

  # - name: Cleanup
  #   run: |
  #     aws configure unset aws_access_key_id
  #     aws configure unset aws_secret_access_key
  #   if: always()
