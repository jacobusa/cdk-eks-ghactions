---
apiVersion: v1
kind: Secret
metadata:
  name: flask-secret
type: Opaque
data:
  OWM_API_KEY: <OWM_API_KEY>
  POSTGRES_DATABASE_URI: <POSTGRES_DATABASE_URI>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  # labels:
  #   app: weather-api
  name: flask-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask
  template:
    metadata:
      labels:
        app: flask
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io.scheme: "http"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
    spec:
      containers:
        - name: flask
          image: jbadenhorst/weather-api:latest
          ports:
            - containerPort: 8080
          env:
            - name: OWM_API_KEY
              valueFrom:
                secretKeyRef:
                  name: flask-secret
                  key: OWM_API_KEY
            - name: POSTGRES_DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: flask-secret
                  key: POSTGRES_DATABASE_URI
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  # labels:
  #   app: weather-api
  name: flask-service
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: flask
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flask-ingress
  # annotations:
  #   kubernetes.io/ingress.class: ingress-nginx
spec:
  tls:
    - hosts:
        - justadomain.xyz
      secretName: flask-app-tls

  ingressClassName: nginx
  rules:
    - host: justadomain.xyz
      http:
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: flask-service
                port:
                  number: 8080

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: flask
  namespace: default
spec:
  dnsNames:
    - justadomain.xyz
  secretName: flask-app-tls
  issuerRef:
    name: letsencrypt-cluster-issuer
    kind: ClusterIssuer
